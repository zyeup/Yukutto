name: Web API Deploy Pipeline
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'back/**'
      - 'front/**'
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: yukutto-api-cluster
  ECS_SERVICE: yukutto-api-service
  ECR_REPOSITORY: yukutto-api-ecs
  ECS_TASK_DEFINITION_API: back/.aws/task-def-api.json

permissions:
  id-token: write
  contents: read

jobs:
  test-and-build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    services:
      db:
        image: postgres:15.7
        env:
          POSTGRES_DB: myapp_test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
          working-directory: back

      - name: Run Database Migrations for Test Environment
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails db:drop
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Run Backend Tests
        run: bundle exec rspec

      - name: Build Backend Docker Image
        run: docker build -t temp_api_image:latest -f Dockerfile.production .

      - name: Configure AWS credentials for Backend
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag temp_api_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > api-image-uri.txt

      - name: Upload the image uri file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image-uri
          path: back/api-image-uri.txt


  # Deploy
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-and-build-backend]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials for Backend
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: api-image-uri
          path: artifacts

      - name: Define the image URI
        run: |
          echo "API_IMAGE_URI=$(cat artifacts/api-image-uri.txt)" >> $GITHUB_ENV

      - name: Fill in the new image URI in the amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: rails
          image: ${{ env.API_IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  test-and-build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front
    steps:
      - uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.x"
          cache: "npm"
          cache-dependency-path: "front/package-lock.json"

      - name: Install Frontend Dependencies
        run: npm ci

      # - name: Create .env.production file
      #   working-directory: front
      #   run: |
      #     cat << EOF > .env.production
      #     VITE_API_URL=${{ secrets.VITE_API_URL }}
      #     VITE_GOOGLE_MAP_API_KEY=${{ secrets.VITE_GOOGLE_MAP_API_KEY }}
      #     EOF

      - name: Run Frontend Tests
        run: npm run test

      - name: Build Frontend
        run: |
          VITE_API_URL="${{ secrets.VITE_API_URL }}"\
          VITE_GOOGLE_MAP_API_KEY="${{ secrets.VITE_GOOGLE_MAP_API_KEY }}"\
          npm run build

      - name: Configure AWS Credentials for Frontend
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Deploy Frontend to S3
        run: aws s3 cp ./dist s3://yukutto-web/ --recursive
